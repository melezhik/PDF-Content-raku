Release 0.4.4
- Remove PDF::Content::Tag::* subclasses. Strip back to content
  related tags only. Fuctionality exported to PDF::Tags (under
  construction).
- PDF::Content.print() method now aggregates printed text in $*ActualText
  if this variable is present in the lexpad. Utilized by the .mark()
  method in PDF::TAGS::Elem.
  
Release 0.4.3
- withdrew implicit content tagging in .print() and .do() methods
- replaced with new PDF::Content::Tag::Elem .mark() and .do() methods
- add PDF::Content::Tag::Root - explicit struct tree root
- remove FakeGfxParent role from test suite. Just use PDFTiny.
- fixed building of Structured Parent Tree

Release 0.4.2
- rename class PDF::Content::Tag::Marked -> PDF::Content::Tag::Mark
- remove tag-name check on marked content tags. Anything is allowed (it's
  only struct elem nodes thayt next to be named correctly).
- also remove BBox attribute from Marked cotnent and rename tags to /Text
  and /Image respectively.

Release 0.4.1
- .print() and .say() methods now always return block coordinates
- .tag() returns the return value of the executed block
- the .do() method now accepts a :position argument; compatible with .print()
- text blocks now bind the TextRender and Font graphics settings.
- allow color(r, g, b) instead of color([r, g, b]), etc

Release 0.4.0
- Rename modules *.pm -> *.rakumod

Release 0.3.2
- [PDF::Content::Graphics]
  - remove $.gfx(:render, ...) option
  - $.render() method now only renders once

Release 0.3.1
- [PDF::Content] Add $.tag method. Deprecate $.marked-content()
- [PDF::Content::Interface] new role for PDF implementations
- [t/ops.t] fix text for PDF v0.3.8- (issue #3)

Release 0.3.0
- [PDF::Content::Ops] Added graphics-state :delta option:
  -- rename :comment-ops option to :comment
  -- rename :debug option to :trace
  -- .graphics-state(:delta) returns variables updated since last Save('q')
  -- .gsave(:delta) returns an array that summarizes updated variables on the
     graphics stack. The final entry is the same as .graphics-state(:delta)
  -- improved !debug() method. Uses .graphics-state(:delta) and dumps JSON.
  -- Setting both :comment and :trace now causes tracing to be written as
     comments to PDF content streams
- [PDF::Content::Text::{Block|Line|Style}]
  -- Defer font encoding until rendering
  -- Add comments displaying original text when $gfx :comment option is True

Release 0.2.9
- Add $gfx(:debug) option
- Fix handling of 'std' encoding in PDF::Content::Font::Enc::Glyphic

Release 0.2.8
- Allow named page sizes: $page.media-box = 'Letter';
- Add typechecking/coercement to Type1 encoder differences array

Release 0.2.7
- Added $page.bleed() method. Convenience method for getting
  or setting bleed as a gutter around the crop box.
- Fix tests for Rakudo 2018.12+ blead

Release 0.2.6
- $gfx.do() and $text-block.print() now return rectangles
  representing the display coordinates
- Added method user-default-coords() to convert coordinates or
  rectangles from transformed user-space to default user-space.

Release 0.2.5
- Streamline Save(q) and Restore(Q) methods in PDF::Content::Ops
- Fixed Extended Graphics State Smoothness method. Renamed BlackGenerationFunction
  -> BlackGeneration and UnderColorRemovalFunction -> UnderColorRemoval

Release 0.2.4
- Added PDF::Content::Tag and $.marked-content method for tag extraction
- Added PDF::Content::Font::Enc::Glyphic role
- Keep space characters when rendering text blocks. Conform with
  [PDF 32000 - 14.8.2.5: Identifying Word Breaks]

Release 0.2.3
- open() method moved from PDF::Content::Image to PDF::Content::XObject
- fix spelling of rendering intent 'RelativeColorimetric'

Release 0.2.2
- Changed $.gfx method to not render by default
- Added some structured exceptions to PDF::Content::Ops
- Add $gfx.char-width, .char-height and .char-bbox attributes.
- Track operators d0 (SetCharWidth) and d1 (SetCharWidthBBox)

Release 0.2.1
- Tweak handling of BX .. EX compatibility blocks
- Fix BDC op (BeginMarkedContentDict) to allow dict or name as second argument
- Correct sequencing checks on 'sh' (ShFill) operator

Release 0.2.0
- Adjust to PDF ver 0.2.8. PDF::DAO classes have been
  renamed to PDF::COS.

Release 0.1.2
- Widthdrew PDF::Content::Text::Reserved.
- Fix PDF::Content::Image.data-uri encoding.

Release 0.1.1
- $gfx.FillColor, $gfx.StrokeColor now register unknown colors in
  the graphics parent's resource dictionary.

Release 0.1.0
- Changed structure of PDF::Content::XObject[Image] to match
  PDF::Content::Font. It now has a $.image-obj handler object,
  similar to the PDF::Content::Font $.font-obj attribute.
- Fixed assignment to page boxes, e.g.: $page.art-box
- Work-around PDF WordSpacing restrictions in multiple-byte
  encoded fonts (issue #2)
- Add 'std' (StandardEncoding) encoding table

Release 0.0.9
- PDF::Content::Font::Enc::Type1 - Optimised encoding to always
  handle subsets up to a maximum of 255 characters. Glyphs are
  mapped as they are encountered:
    -- firstly, as defined by the requested encoding scheme
    -- secondly to unmapped codes in the encoding scheme
    -- thirdly to mapped, but unused character encodings
- PDF::Content::Graphics - fixed graphics update bug

Release 0.0.8
- Replace PDF::Content::Util::Font module with class
  PDF::Content::Font::CoreFont

Release 0.0.7
- Replaced $gfx.TextMove() with $gfx.text-position

Release 0.0.6
- Initial release
    
